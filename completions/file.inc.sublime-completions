{
    "scope": "source.pawn - variable.other.pawn",

    "completions": 
    [
		"io_read",
		"io_write",
		"io_readwrite",
		"io_append",
		"seek_start",
		"seek_current",
		"seek_end",
		"EOF",

		{"trigger": "fopen", "contents": "fopen(${1:const filename[]}, ${2:filemode:mode = io_readwrite})"},
		{"trigger": "fclose", "contents": "fclose(${1:File:handle})"},
		{"trigger": "ftemp", "contents": "ftemp()"},
		{"trigger": "fremove", "contents": "fremove(${1:const filename[]})"},
		{"trigger": "fwrite", "contents": "fwrite(${1:File:handle}, ${2:const string[]})"},
		{"trigger": "fread", "contents": "fread(${1:File:handle}, ${2:string[]}, ${3:size = sizeof (string)}, ${4:bool:pack = false})"},
		{"trigger": "fputchar", "contents": "fputchar(${1:File:handle}, ${2:value}, ${3:bool:utf8 = true})"},
		{"trigger": "fgetchar", "contents": "fgetchar(${1:File:handle}, ${2:bool:utf8 = true})"},
		{"trigger": "fblockwrite", "contents": "fblockwrite(${1:File:handle}, ${2:const buffer[]}, ${3:size = sizeof (buffer)})"},
		{"trigger": "fblockread", "contents": "fblockread(${1:File:handle}, ${2:buffer[]}, ${3:size = sizeof (buffer)})"},
		{"trigger": "fseek", "contents": "fseek(${1:File:handle}, ${2:position = 0}, ${3:seek_whence:whence = seek_start})"},
		{"trigger": "ftell", "contents": "ftell(${1:File:handle})"},
		{"trigger": "flength", "contents": "flength(${1:File:handle})"},
		{"trigger": "fflush", "contents": "fflush(${1:File:handle})"},
		{"trigger": "fexist", "contents": "fexist(${1:const filename[]})"},
		{"trigger": "fstat", "contents": "fstat(${1:const filename[]}, ${2:&size = 0}, ${3:&timestamp = 0}, ${4:&attrib = 0}, ${5:&inode = 0})"},
		{"trigger": "frename", "contents": "frename(${1:const oldname[]}, ${2:const newname[]})"},
		{"trigger": "fcopy", "contents": "fcopy(${1:const source[]}, ${2:const target[]})"},
		{"trigger": "filecrc", "contents": "filecrc(${1:const filename[]})"},
		{"trigger": "diskfree", "contents": "diskfree(${1:const volume[] = \"\"})"},
		{"trigger": "fattrib", "contents": "fattrib(${1:const filename[]}, ${2:timestamp = 0}, ${3:attrib = 0x0F})"},
		{"trigger": "fmatch", "contents": "fmatch(${1:filename[]}, ${2:const pattern[]}, ${3:index = 0}, ${4:size = sizeof (filename)})"},
		{"trigger": "fmkdir", "contents": "fmkdir(${1:const dirname[]})"},
		{"trigger": "fcreatedir", "contents": "fcreatedir(${1:const dirname[]})"},
		{"trigger": "deletecfg", "contents": "deletecfg(${1:const cfgname[] = \"\"}, ${2:const section[] = \"\"}, ${3:const key[] = \"\"})"},
		{"trigger": "readcfg", "contents": "readcfg(${1:const cfgname[] = \"\"}, ${2:const section[] = \"\"}, ${3:const key[]}, ${4:value[]}, ${5:size = sizeof (value)}, ${6:const defvalue[] = \"\"}, ${7:bool:pack = false})"},
		{"trigger": "readcfgvalue", "contents": "readcfgvalue(${1:const cfgname[] = \"\"}, ${2:const section[] = \"\"}, ${3:const key[]}, ${4:defvalue = 0})"},
		{"trigger": "writecfg", "contents": "writecfg(${1:const filename[] = \"\"}, ${2:const section[] = \"\"}, ${3:const key[]}, ${4:const value[]})"},
		{"trigger": "writecfgvalue", "contents": "writecfgvalue(${1:const filename[] = \"\"}, ${2:const section[] = \"\"}, ${3:const key[]}, ${4:value})"},
		{"trigger": "ffind", "contents": "ffind(${1:const pattern[]}, ${2:filename[]}, ${3:size = sizeof (filename)}, ${4:&idx})"},
		{"trigger": "dfind", "contents": "dfind(${1:const pattern[]}, ${2:filename[]}, ${3:size = sizeof (filename)}, ${4:&idx})"},
		{"trigger": "dcreate", "contents": "dcreate(${1:const name[]})"},
		{"trigger": "drename", "contents": "drename(${1:const oldname[]}, ${2:const newname[]})"},
		{"trigger": "ftouch", "contents": "ftouch(${1:const filename[]})"}
	]
}